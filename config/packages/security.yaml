security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # Reload user from session and other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Users\Domain\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Définit un authentificateur pour toutes les requêtes à la route "custom_create_contact"
       

        main:
            # Enabling lazy loading for the firewall (might improve performance)
            lazy: true
            provider: app_user_provider

            # Custom authenticator to handle login
            pattern: ^/
            custom_authenticator: App\Users\Infrastructure\Security\LoginAuthenticator

            # Logout configuration
            logout:
                path: app_logout
                target: app_login
                # Uncomment and set another route if you want to redirect to a different page after logout.
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800  # Duration of 1 week (in seconds)
                path: /

            
            

        api:
            # Sécurise toutes les routes commençant par /api
            pattern: ^/api/  # Ceci doit être un tableau
            custom_authenticator: 
                App\Users\Infrastructure\Security\LoginAuthenticator # Si tu as un authentificateur spécifique pour les API
            stateless: true  # Evite les sessions pour les API
           
            # ou un autre mécanisme si nécessaire

    # Access control configuration
    access_control:
        # Public access to login and registration pages (first match rule applies)
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }

        # Require user to be authenticated (ROLE_USER) for the concerts pages
        - { path: ^/concert/alls, roles: ROLE_USER }
        - { path: ^/concert/, roles: ROLE_USER }

        # Require admin role for editing, deleting, and other sensitive pages
        - { path: ^/concert/edit, roles: ROLE_ADMIN }
        - { path: ^/concert/delete, roles: ROLE_ADMIN }
        - { path: ^/contact, roles: ROLE_ADMIN }
        - { path: ^/alert/, roles: ROLE_ADMIN }
        - { path: ^/marker/, roles: ROLE_ADMIN }

        # Uncomment this for API access control (if needed)
        # - { path: ^/api, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # Reduce the cost factor for tests to make hashing faster
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
