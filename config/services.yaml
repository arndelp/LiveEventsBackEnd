# Fichier de configuration de service Symfony
# Permet de déclarer les services et classes de l'application pour qu'ils puissent être utiliser grâce à l'injection de dépendances.

# Définition des constantes configurables
parameters:
    contact_receiver_email: '%env(CONTACT_RECEIVER_EMAIL)%'   # pour la réception de mail lors d'une demande de contact
    app.path.produit_images: '%kernel.project_dir%/public/uploads/concerts'
    google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
    
    

services:
    # Configuration par défaut des services
    _defaults:
        autowire: true      # Symfony va automatiquement injecter les dépendances dans les constructeurs des services.
        autoconfigure: true # Symfony va automatiquement ajouter les bons tags aux services selon leur rôle (ex: commande, événement...).

    
    # Chargement automatique des classes
        # Cela indique à Symfony de scanner automatiquement les classes dans le dossier donné et de les enregistrer comme services.
        # On exclut les entités (qui sont des objets Doctrine) et les contrôleurs (déjà gérés par le système de routage routes.yaml).
    App\Concerts\:
        resource: '../src/Concerts/'
        exclude:
            - '../src/Concerts/Domain/Entity/'   
            - '../src/Concerts/UI/'              

    App\Alert\:
        resource: '../src/Alert/'
        exclude:
            - '../src/Alert/Domain/Entity/'
            - '../src/Alert/UI/'

    App\Markers\:
        resource: '../src/Markers/'
        exclude:
            - '../src/Markers/Domain/Entity/'  
            - '../src/Markers/UI/'              

    App\Users\:
        resource: '../src/Users/'
        exclude:
            - '../src/Users/Domain/Entity/'   
            - '../src/Users/UI/'              

    App\Contact\:
        resource: '../src/Contact/'
        exclude:
            - '../src/Contact/Domain/Entity/'
            - '../src/Contact/UI/'

    
# Services manuellement configurés
    # Certaines classes ont besoin de paramètres spécifiques
        # injection de l'EntityManager pour la classe EmailDuplicationChecker
    App\Users\Infrastructure\Repository\EmailDuplicationChecker:
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
        # SymfonyMailerService reçoit l'adresse email à qui envoyer les message de contact
    App\Contact\Infrastructure\Service\SymfonyMailerService:
        arguments:            
            $receiverEmail: '%contact_receiver_email%'
        # \SendContactMessage dépend à la fois d'un email et du useCase SetContactMessage
    App\Contact\Application\UseCase\SendContactMessage:
        arguments:
            $toEmail: '%contact_receiver_email%'   
            $setContactMessage: '@App\Contact\Application\UseCase\SetContactMessage'

    App\Users\Infrastructure\Security\LoginAuthenticator:
        arguments:
            $urlGenerator: '@router.default'

    App\Contact\Application\UseCase\SetContactMessage:
        autowire: true
        autoconfigure: true
        public: false

    App\Shared\Infrastructure\Security\GetUser:
        autowire: true
        autoconfigure: true

        # Contrôleurs comme services
            # Les côntroleurs doivent être publics et tagués pour recevoir automatiquement les arguments des services dont il a besoin.
    App\Users\UI\Controller\SecurityController:
        autowire: true
        autoconfigure: true
        public: true
        tags: ['controller.service_arguments']

    App\Users\UI\Controller\RegistrationController:
        autowire: true
        autoconfigure: true
        public: true
        tags: ['controller.service_arguments']


    App\Concerts\UI\Controller\ConcertController:
        autowire: true
        autoconfigure: true
        public: true
        tags: ['controller.service_arguments']

    App\Contact\UI\Controller\ContactMessageController:
        autowire: true
        autoconfigure: true
        public: true
        tags: ['controller.service_arguments']

    App\Alert\UI\Controller\:
        resource: '../src/Alert/UI/Controller/'
        public: true
        tags: ['controller.service_arguments']
        autowire: true
        autoconfigure: true

    App\Contact\UI\Controller\ContactController:
        autowire: true
        autoconfigure: true
        public: true
        tags: ['controller.service_arguments']

    App\Markers\UI\Controller\:
        resource: '../src/Markers/UI/Controller/'
        public: true
        autowire: true
        autoconfigure: true
        tags: ['controller.service_arguments']
    

    # Liaison entre les interfaces de repository et les DoctrineRepository. 
    App\Concerts\Domain\Repository\ConcertRepositoryInterface: 
        alias: App\Concerts\Infrastructure\Repository\DoctrineConcertRepository

    App\Alert\Domain\Repository\AlertRepositoryInterface: 
        alias: App\Alert\Infrastructure\Repository\DoctrineAlertRepository

    App\Markers\Domain\Repository\MarkerRepositoryInterface: 
        alias: App\Markers\Infrastructure\Repository\DoctrineMarkerRepository

    App\Users\Domain\Repository\UserRepositoryInterface: 
        alias: App\Users\Infrastructure\Repository\DoctrineUserRepository

    App\Users\Domain\Repository\EmailDuplicationCheckerInterface:
        alias: App\Users\Infrastructure\Repository\EmailDuplicationChecker

    App\Shared\Domain\Security\GetUserInterface:
        alias: App\Shared\Infrastructure\Security\GetUser

    App\Contact\Domain\Repository\ContactRepositoryInterface:
        alias: App\Contact\Infrastructure\Repository\DoctrineContactRepository

    App\Contact\Domain\Service\MailerServiceInterface:
        alias: App\Contact\Infrastructure\Service\SymfonyMailerService

    

 


   
        

    
  